(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 11.0' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[     94818,       1978]
NotebookOptionsPosition[     93137,       1933]
NotebookOutlinePosition[     93496,       1949]
CellTagsIndexPosition[     93453,       1946]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{
Cell[BoxData[{
 RowBox[{
  RowBox[{"SetDirectory", "[", 
   RowBox[{
    RowBox[{"ParentDirectory", "[", 
     RowBox[{"NotebookDirectory", "[", "]"}], "]"}], "<>", 
    "\"\</Transition_Quantity_Generator/Mathematica_Scripts/\>\""}], "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"<<", "\"\<Transition_Definitions.m\>\""}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"ResetDirectory", "[", "]"}], ";"}]}], "Input",
 CellChangeTimes->{{3.7482382678979*^9, 3.748238431025752*^9}}],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"curdir", "=", 
   RowBox[{
    RowBox[{"NotebookDirectory", "[", "]"}], "<>", "\"\<tmp/\>\""}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"params", "=", 
   RowBox[{"Partition", "[", 
    RowBox[{
     RowBox[{"BinaryReadList", "[", 
      RowBox[{
       RowBox[{"curdir", "<>", "\"\<params.bin\>\""}], ",", 
       "\"\<Real64\>\""}], "]"}], ",", "5"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"data", "=", 
   RowBox[{"Partition", "[", 
    RowBox[{
     RowBox[{"BinaryReadList", "[", 
      RowBox[{
       RowBox[{"curdir", "<>", "\"\<data.bin\>\""}], ",", "\"\<Real64\>\""}], 
      "]"}], ",", "2"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"data2", "=", 
   RowBox[{"Partition", "[", 
    RowBox[{
     RowBox[{"BinaryReadList", "[", 
      RowBox[{
       RowBox[{"curdir", "<>", "\"\<data_2.bin\>\""}], ",", 
       "\"\<Real64\>\""}], "]"}], ",", "2"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"Module", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
    "Rabifreq", ",", "FWHM", ",", "\[CapitalGamma]", ",", "tlim", ",", "sln", 
     ",", "\[Gamma]"}], "}"}], ",", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"Rabifreq", "=", "0"}], ";", "\[IndentingNewLine]", 
    RowBox[{"Do", "[", 
     RowBox[{
      RowBox[{"Rabifreq", "+=", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{
          RowBox[{"elem", "[", 
           RowBox[{"[", "1", "]"}], "]"}], "+", 
          RowBox[{"I", " ", 
           RowBox[{"elem", "[", 
            RowBox[{"[", "2", "]"}], "]"}]}]}], ")"}], " ", 
        RowBox[{"Exp", "[", 
         RowBox[{
          RowBox[{"-", "2"}], " ", "\[Pi]", " ", "I", " ", 
          RowBox[{"elem", "[", 
           RowBox[{"[", "3", "]"}], "]"}], " ", "t"}], "]"}]}]}], ",", 
      RowBox[{"{", 
       RowBox[{"elem", ",", "params"}], "}"}]}], "]"}], ";", 
    "\[IndentingNewLine]", 
    RowBox[{"FWHM", "=", 
     RowBox[{"2", " ", "\[Pi]", " ", 
      RowBox[{
       RowBox[{"params", "[", 
        RowBox[{"[", "1", "]"}], "]"}], "[", 
       RowBox[{"[", "4", "]"}], "]"}]}]}], ";", "\[IndentingNewLine]", 
    RowBox[{"\[CapitalGamma]", "=", 
     RowBox[{
      RowBox[{"params", "[", 
       RowBox[{"[", "1", "]"}], "]"}], "[", 
      RowBox[{"[", "5", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
    RowBox[{"\[Gamma]", "=", 
     RowBox[{"\[CapitalGamma]", "+", "FWHM"}]}], ";", "\[IndentingNewLine]", 
    RowBox[{"tlim", "=", 
     RowBox[{
      RowBox[{"data", "[", 
       RowBox[{"[", 
        RowBox[{"Length", "[", "data", "]"}], "]"}], "]"}], "[", 
      RowBox[{"[", "1", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
    RowBox[{"sln", "=", 
     RowBox[{"NDSolve", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{
          RowBox[{
           RowBox[{"pee", "'"}], "[", "t", "]"}], "\[Equal]", 
          RowBox[{
           RowBox[{
            RowBox[{"-", "I"}], " ", 
            FractionBox["Rabifreq", "2"], " ", 
            RowBox[{"pge", "[", "t", "]"}]}], "+", 
           RowBox[{"Conjugate", "[", 
            RowBox[{
             RowBox[{"-", "I"}], " ", 
             FractionBox["Rabifreq", "2"], " ", 
             RowBox[{"pge", "[", "t", "]"}]}], "]"}], "-", 
           RowBox[{"\[CapitalGamma]", " ", 
            RowBox[{"pee", "[", "t", "]"}]}]}]}], ",", 
         RowBox[{
          RowBox[{
           RowBox[{"pgg", "'"}], "[", "t", "]"}], "\[Equal]", 
          RowBox[{
           RowBox[{"I", " ", 
            FractionBox["Rabifreq", "2"], " ", 
            RowBox[{"pge", "[", "t", "]"}]}], "+", 
           RowBox[{"Conjugate", "[", 
            RowBox[{"I", " ", 
             FractionBox["Rabifreq", "2"], " ", 
             RowBox[{"pge", "[", "t", "]"}]}], "]"}]}]}], ",", 
         RowBox[{
          RowBox[{
           RowBox[{"pge", "'"}], "[", "t", "]"}], "\[Equal]", 
          RowBox[{
           RowBox[{
            RowBox[{"-", 
             FractionBox[
              RowBox[{"I", " ", 
               RowBox[{"Conjugate", "[", "Rabifreq", "]"}]}], "2"]}], " ", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{"pee", "[", "t", "]"}], "-", 
              RowBox[{"pgg", "[", "t", "]"}]}], ")"}]}], "-", 
           RowBox[{
            FractionBox["\[Gamma]", "2"], " ", 
            RowBox[{"pge", "[", "t", "]"}]}]}]}], ",", 
         RowBox[{
          RowBox[{"pee", "[", "0", "]"}], "\[Equal]", "0"}], ",", 
         RowBox[{
          RowBox[{"pgg", "[", "0", "]"}], "\[Equal]", "1"}], ",", 
         RowBox[{
          RowBox[{"pge", "[", "0", "]"}], "\[Equal]", "0"}]}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"pee", ",", "pgg", ",", "pge"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"t", ",", "0", ",", "tlim"}], "}"}]}], "]"}]}], ";", 
    "\[IndentingNewLine]", 
    RowBox[{"plts", "=", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"Plot", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"pgg", "[", "t", "]"}], "/.", "sln"}], ",", 
         RowBox[{"{", 
          RowBox[{"t", ",", "0", ",", "tlim"}], "}"}], ",", 
         RowBox[{"PlotRange", "\[Rule]", "Full"}]}], "]"}], ",", 
       RowBox[{"Plot", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"pee", "[", "t", "]"}], "/.", "sln"}], ",", 
         RowBox[{"{", 
          RowBox[{"t", ",", "0", ",", "tlim"}], "}"}], ",", 
         RowBox[{"PlotRange", "\[Rule]", "Full"}]}], "]"}]}], "}"}]}], ";", 
    "\[IndentingNewLine]", 
    RowBox[{"Show", "[", 
     RowBox[{
      RowBox[{"ListPlot", "[", 
       RowBox[{"data", ",", 
        RowBox[{"PlotStyle", "\[Rule]", "Orange"}]}], "]"}], ",", 
      RowBox[{"ListPlot", "[", 
       RowBox[{
        RowBox[{"data2", "[", 
         RowBox[{"[", 
          RowBox[{";;", ";;", "100"}], "]"}], "]"}], ",", 
        RowBox[{"PlotStyle", "\[Rule]", "Green"}]}], "]"}], ",", 
      RowBox[{"Plot", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"(", 
          RowBox[{
           RowBox[{"pee", "[", "t", "]"}], "+", 
           RowBox[{"pgg", "[", "t", "]"}]}], ")"}], "/.", "sln"}], ",", 
        RowBox[{"{", 
         RowBox[{"t", ",", "0", ",", "tlim"}], "}"}], ",", 
        RowBox[{"PlotRange", "\[Rule]", "Full"}]}], "]"}]}], "]"}]}]}], 
  "\[IndentingNewLine]", "]"}]}], "Input",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.},
 CellChangeTimes->{{3.748113151813983*^9, 3.748113299068954*^9}, {
   3.748146656955804*^9, 3.748146689180861*^9}, {3.7481467544544*^9, 
   3.748146775885447*^9}, {3.748146808312896*^9, 3.748146985736039*^9}, {
   3.748147031925568*^9, 3.748147157735344*^9}, {3.7481472848088284`*^9, 
   3.74814734691327*^9}, {3.748147389835278*^9, 3.748147413400752*^9}, {
   3.748147485997682*^9, 3.748147486641674*^9}, {3.748147567708153*^9, 
   3.7481476062136087`*^9}, 3.748248479756218*^9, {3.748318414895935*^9, 
   3.748318467206352*^9}}],

Cell[BoxData[
 GraphicsBox[{{{}, {{}, 
     {RGBColor[1, 0.5, 0], PointSize[0.0055000000000000005`], 
      AbsoluteThickness[1.6], PointBox[CompressedData["
1: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
Eja6yA==
       "]]}, {}}, {}, {}, {{}, {}}}, {{}, {{}, 
     {RGBColor[0, 1, 0], PointSize[0.012833333333333334`], AbsoluteThickness[
      1.6], PointBox[CompressedData["
1:eJwBIQLe/SFib1JlAgAAACEAAAACAAAAAAAAAAAAAAAAAAAAAADwP0OvvJry
11o+o4R1VEB07z8/G8tqWA5rPsg17/OD8u4/zx6uI65mdD7/m54avHbuP1Cr
JjWyN3s+1D/wm3767T/fiFbQrwuBPn2jzm30eO0/M1+2XhyXhD4I27z2o/Ts
P7Cddr7AKIg+edRLTwB/7D/zjko4fNeLPjDRLFuq9us/qBRIawa7jz7i73Xp
HHfrPx40UFOqyJE+OLGQENn56j+/2GF5vbqTPszd9EfUdOo/qyfREUe+lT51
MeD3q/HpP5v0nKnf2Zc+B3CUDYJw6T+9jwr0beeZPmtMj7YT8ug/dJH3fF0e
nD47kkfdY2noPyuT5AVNVZ4+zoxi/87k5z9tymhHHkagPtO8uJoQaOc/eauk
5kRloT5PMfcoDePmP27fSdakhaI+j7eP2mJq5j85YMCaHKGjPiMyZipU7OU/
XYO5rXjApD4dDH1sqXrlPzp1oSmj4KU+zS64gFL/5D8F9hfuGvymPq5OxgEX
lOQ/r4jqC7MbqD5ZH2i6Uh3kPwYL+XyhO6k+/6hfoEq14z/Ri29BGVeqPld7
+W8jReM/eMa/+3Z2qz4BBS720+HiP9KgUNCflqw+7OIDUJJ04j+dIceUF7Kt
PlTczDKVFuI/qCII1abRrj4AgKT+mK7hP542qCOe8a8+4KRU1fpS4T/EWw/0
ioawPp8yPU8V8eA/rpoKSw==
       "]]}, {}}, {}, {}, {{}, {}}}, {{{}, {}, 
     TagBox[
      {RGBColor[0.368417, 0.506779, 0.709798], AbsoluteThickness[1.6], 
       Opacity[1.], LineBox[CompressedData["
1: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
0O1UUVxJUtiZH/lkbgMLvJ/+a9zbQ6HWQO+r0i0s6D5xMl+4m8LM1fIfrymy
QD2h+t7LTgpX6F2lVJVYYF9ltH+4g8IrnrW/p9VY8HxK29yZMZkhJFCsyYKt
b7baazDW77Rb56nPgiS3wssqjPME8rYpGTHvSa3hUWAsoj4LP8xZ0C9o1Tr9
icIIiyaL4TwW+L0fNLCppHD6hrhD+hMWuF0V1DJj/O/TMx6nnrOgs8jMRJZx
7UhR8PpKFlxoLJYprKBQQWxhfP8rFii7OY52lVMYZ2CaldzAAvlgofSIFxTO
e3FK7VpYsLDDSqq5lMJTuWONkh9Z8HZjw77UEgobe5V7e7tZsPr0ntsbn1G4
e8VNmtPPgu3h88euPKGQrdnKdYxiwefa6MSX+RRyX5ZctW6CBV1bFZcpPqbQ
Ke38+q7vLHhZlW3Xn0Nha1vJbtZv5v4F2d9+ZlG4l49P7/BfFnDfqr/kk0lh
ioqltegiNqxccv+vVwaFS5ySz3zkZ4Pqwsn2wUcUBvi5XX/jyIYrd31bFkVS
aLR+Qe3582xQsOcET92lULQ2XHDlJTaItQRqGDEeOLPWusiTDYuEPm6du/P/
fj96cPg6G5431pQMML6at4uaD2DDtUbpif8Y65hVKqbcYoPARPb5esbLpwyv
6t1hw3yZUrMP4864jqqxaDY4HR1o6A2nMF3Vkf9uPBtWW87kt92m0KX7m/mu
B2wIVJp6bxtGoZqvL/tjGhsclb9HXgqhkFdm6aBXFhu6R0TJbcEUttTcl5ci
2HDE3tEi4waFCac3utcUsUFKzpbmCaDwDH/BizOlbFCefibi5EvhrlzgXVbF
BvTgkpj3pnCwY/FdM/EEoMN5ifdOFOrt4iR1NidAqsUBnVltCv/e2FZbIJUI
gmLC4fnfR/B8auAhKvwB3DbXvXSYM4KORNKUq2sSWKsUdF21GsGg0i/pcaLJ
cK9qp2fKkhHkyuUsHXubDALHD/kaFg3jjwv+blKeKZDj3vL+vcsw6gi/ibyp
kApFnqGfz0kMI/foXFxkfyq4Rq/zDG8bQrXbDhy/0DRYBKS3VuQQNgnvOJyo
kQ4vJcZyKnAIu5wVRR6MpYP9xwqH938G0WZKolQv8iHQc70iQeWDuN3OWVhC
7xEMNpqsyXMZRD/2N5f2iUdQaO3ofVxxEOVfdPiXp2fAr4UyFlXjA2ieNxUd
YpoJLdY10W6PBpBqmA+f/ZUJIee8BFrPDuCn5rPqCblZ8ELL/R+dLQOolbpk
QtI6Gy4GDKYKUP3Ie2ypZatgDgxXyk1bZvXjXu355K0vc6BXwmPyt0M/UtPS
X0+fywU/m0q55Vv68WtM5o9W6TxomifUv9N96MblMCvVmAcfKM2XT/P78PR9
wVHhy4/h8KaLPLRnH9qGLatdt5qAau2cBXMafQgF20STzhDgLhfv1MXbh2Of
VDzEnAhoKry47CtPH977q/0h6hwBEw5tuhIL+1BH1mTn0gsE+B70jfJa0IeT
hrYRN50J4OX1lJHm6sOEyw4Tfy4SsOhsg/ravyQeYLkYXnElQO4Hz9szf0j8
WemV9fUSASGXXWR5GKeMBC0+50bAtcqMDZ3zJBoLRjkOuhMQ22Pk0MJ4djen
5pgnARfEJx0aGWccyZD5eIWAKqxdn8vYMqDQz/QaAXenTr+3Ybwgs7y3zouA
yf0Je0vnSMxrrtunfZ2A1hXcUDdLou3PD6wyHwL8EtuNA2ZI5JMgp/f4ERDE
bRQ0OU3iu+CojoZ7BOwZmvK4NEaidx5HWTeegNUxgYXCoyTKtWXElrMImKq7
uP7yCInts4XflRMIWJxv65s0RGKATIVZPocAxS8h/iUDJG4/UP94ywMCIu7I
O3T3kdh9sW1ZWhIBMl0/RGVJEm/FkeckUgg46qCZnNdL4p4Xn+viUgnIbTwu
E9RDYv/Az00r0glojskcL+gm8Q4/d1DIQwJEww5XKjJW27FskDuDqW/7etuv
XSRS1qJa3pkEVAZMqvQyjvFZn/QjiwCn+ZP2XYw10xX+OOcQoMIn2FLPeKJB
9SiVy+RnuGlzBGPWN53nJx4TkGxyad9qxnpipqJdBAHDYQ/n9TtJ/I5HPCwL
CBCQijgh20FikqPjh7eFBHjMhCwv+kiiYbjrTv0iAkwyg/MXtpM4XegdUfmU
AC2pE7/lPpCY3hk8oVpMwEmXs0k6rSSaL4g2LCwhQHPFndeu70j8sykxS76U
gLUlhQpvm0jMMs5c/LCMyVfIu+L8WxKt3Z84SpYTcOiza8+xRhJ5Eipq7lcQ
IH1tV31qA4lEdb3MqioC3K6N7VdmfGy0zS+smslLqCeYjzH/ir5enhoCjszX
75mrJ/Gp0vg+n1cE3GwT85lmfPLYL9avWgLEEpOiehn/D2EKfA4=
        "]]},
      Annotation[#, "Charting`Private`Tag$63009#1"]& ]}, {}, {}}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0.5009963597601054},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImagePadding->All,
  Method->{"CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Part[{{Identity, Identity}, {Identity, Identity}}, 1, 2][#]& )[
         Part[#, 1]], 
        (Part[{{Identity, Identity}, {Identity, Identity}}, 2, 2][#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Part[{{Identity, Identity}, {Identity, Identity}}, 1, 2][#]& )[
         Part[#, 1]], 
        (Part[{{Identity, Identity}, {Identity, Identity}}, 2, 2][#]& )[
         Part[#, 2]]}& )}},
  PlotRange->{{0, 1.*^-6}, {0.524758437866767, 1.}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.},
 CellChangeTimes->{{3.7481472853627357`*^9, 3.748147347606048*^9}, {
   3.748147405539133*^9, 3.7481474138280582`*^9}, {3.7481474803975077`*^9, 
   3.748147531638733*^9}, {3.7481476066771793`*^9, 3.7481476270911427`*^9}, 
   3.7481476626885347`*^9, {3.74814780994413*^9, 3.7481478625410347`*^9}, 
   3.748148525690914*^9, 3.748148604955703*^9, 3.748148785512723*^9, 
   3.7481490005812283`*^9, 3.74814965652286*^9, 3.74814994433421*^9, 
   3.748150025963434*^9, 3.7481510085430737`*^9, 3.7481510981546164`*^9, 
   3.748151135706109*^9, 3.7481512783064013`*^9, 3.748233623401249*^9, 
   3.748242902643791*^9, 3.748245029602648*^9, 3.7482484797569427`*^9, {
   3.748248592919694*^9, 3.748248622710712*^9}, 3.748248876391032*^9, {
   3.748248920602395*^9, 3.748248948111506*^9}, 3.7482489917584953`*^9, 
   3.748249368523382*^9, 3.748249455410589*^9, 3.7482496567917347`*^9, 
   3.748318069197894*^9, {3.7483184102760477`*^9, 3.7483184257539062`*^9}, {
   3.748318465071681*^9, 3.748318479933035*^9}, 
   3.748318877416363*^9},ImageCache->GraphicsData["CompressedBitmap", "\<\
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\
\>"]],

Cell[BoxData[
 RowBox[{"Module", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
    "optsfn", ",", "str", ",", "strarr", ",", "pathoptsfiles", ",", 
     "matchfunc", ",", "k", ",", "mtch", ",", "pathfn", ",", "tmpass", ",", 
     "mfe"}], "}"}], ",", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"matchfunc", "[", 
      RowBox[{"strs_", ",", "match_"}], "]"}], ":=", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"pos", ",", "idx"}], "}"}], ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"For", "[", 
         RowBox[{
          RowBox[{"idx", "=", "1"}], ",", 
          RowBox[{"idx", "\[LessEqual]", 
           RowBox[{"Length", "[", "strs", "]"}]}], ",", 
          RowBox[{"idx", "++"}], ",", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"If", "[", 
            RowBox[{
             RowBox[{
              RowBox[{
               RowBox[{"idx", "+", 
                RowBox[{"Length", "[", "match", "]"}]}], "\[LessEqual]", 
               RowBox[{"Length", "[", "strs", "]"}]}], "&&", 
              RowBox[{
               RowBox[{"strs", "[", 
                RowBox[{"[", 
                 RowBox[{"idx", "+", 
                  RowBox[{"Table", "[", 
                   RowBox[{"idx2", ",", 
                    RowBox[{"{", 
                    RowBox[{"idx2", ",", "0", ",", 
                    RowBox[{
                    RowBox[{"Length", "[", "match", "]"}], "-", "1"}]}], 
                    "}"}]}], "]"}]}], "]"}], "]"}], "\[Equal]", "match"}]}], 
             ",", 
             RowBox[{"Return", "[", 
              RowBox[{"{", 
               RowBox[{"strs", "[", 
                RowBox[{"[", 
                 RowBox[{"idx", "+", 
                  RowBox[{"Length", "[", "match", "]"}]}], "]"}], "]"}], 
               "}"}], "]"}]}], "]"}], ";"}]}], "\[IndentingNewLine]", "]"}], 
        ";", "\[IndentingNewLine]", 
        RowBox[{"Return", "[", 
         RowBox[{"{", "}"}], "]"}], ";"}]}], "\[IndentingNewLine]", "]"}]}], 
    ";", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"mfe", "[", 
      RowBox[{"strs_", ",", "match_"}], "]"}], ":=", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", "tmp", "}"}], ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"tmp", "=", 
         RowBox[{"matchfunc", "[", 
          RowBox[{"strs", ",", "match"}], "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"tmp", "\[Equal]", 
           RowBox[{"{", "}"}]}], ",", 
          RowBox[{
           RowBox[{"Return", "[", 
            RowBox[{"{", "}"}], "]"}], ";"}]}], "]"}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"Return", "[", 
         RowBox[{"{", 
          RowBox[{"Read", "[", 
           RowBox[{
            RowBox[{"StringToStream", "[", 
             RowBox[{"tmp", "[", 
              RowBox[{"[", "1", "]"}], "]"}], "]"}], ",", "Number"}], "]"}], 
          "}"}], "]"}]}]}], "]"}]}], ";", "\[IndentingNewLine]", 
    RowBox[{"optsfn", "=", 
     RowBox[{
      RowBox[{"NotebookDirectory", "[", "]"}], "<>", 
      "\"\<Options_Files/Illumination_Opts_File_2.txt\>\""}]}], ";", 
    "\[IndentingNewLine]", 
    RowBox[{"str", "=", 
     RowBox[{"OpenRead", "[", "optsfn", "]"}]}], ";", "\[IndentingNewLine]", 
    RowBox[{"strarr", "=", 
     RowBox[{"ReadList", "[", 
      RowBox[{"str", ",", "Word"}], "]"}]}], ";", "\[IndentingNewLine]", 
    RowBox[{"Close", "[", "str", "]"}], ";", "\[IndentingNewLine]", 
    RowBox[{"pathoptsfiles", "=", 
     RowBox[{"{", "}"}]}], ";", "\[IndentingNewLine]", 
    RowBox[{"For", "[", 
     RowBox[{
      RowBox[{"k", "=", "1"}], ",", "True", ",", 
      RowBox[{"k", "++"}], ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"mtch", "=", 
        RowBox[{"matchfunc", "[", 
         RowBox[{"strarr", ",", 
          RowBox[{"{", 
           RowBox[{"\"\<Laser\>\"", ",", "\"\<Path\>\"", ",", 
            RowBox[{"ToString", "[", "k", "]"}], ",", "\"\<File\>\"", ",", 
            "\"\<=\>\""}], "}"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"mtch", "\[Equal]", 
          RowBox[{"{", "}"}]}], ",", 
         RowBox[{
          RowBox[{"Break", "[", "]"}], ";"}]}], "]"}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"AppendTo", "[", 
        RowBox[{"pathoptsfiles", ",", 
         RowBox[{
          RowBox[{"NotebookDirectory", "[", "]"}], "<>", 
          RowBox[{"mtch", "[", 
           RowBox[{"[", "1", "]"}], "]"}]}]}], "]"}], ";"}]}], 
     "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
    RowBox[{"stateass", "=", 
     RowBox[{"<|", "|>"}]}], ";", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"stateass", "[", "\"\<grS\>\"", "]"}], "=", 
     RowBox[{"MakeSFKet", "[", 
      RowBox[{"{", 
       RowBox[{"0", ",", 
        RowBox[{"1", "/", "2"}], ",", 
        RowBox[{"1", "/", "2"}], ",", 
        RowBox[{"1", "/", "2"}], ",", 
        RowBox[{
         RowBox[{"mfe", "[", 
          RowBox[{"strarr", ",", 
           RowBox[{"{", 
            RowBox[{
            "\"\<Ground\>\"", ",", "\"\<State\>\"", ",", "\"\<F\>\"", ",", 
             "\"\<=\>\""}], "}"}]}], "]"}], "[", 
         RowBox[{"[", "1", "]"}], "]"}], ",", 
        RowBox[{
         RowBox[{"mfe", "[", 
          RowBox[{"strarr", ",", 
           RowBox[{"{", 
            RowBox[{
            "\"\<Ground\>\"", ",", "\"\<State\>\"", ",", "\"\<mF\>\"", ",", 
             "\"\<=\>\""}], "}"}]}], "]"}], "[", 
         RowBox[{"[", "1", "]"}], "]"}]}], "}"}], "]"}]}], ";", 
    "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"stateass", "[", "\"\<exS\>\"", "]"}], "=", 
     RowBox[{"MakeSFKet", "[", 
      RowBox[{"{", 
       RowBox[{"0", ",", 
        RowBox[{"1", "/", "2"}], ",", 
        RowBox[{"1", "/", "2"}], ",", 
        RowBox[{"1", "/", "2"}], ",", 
        RowBox[{
         RowBox[{"mfe", "[", 
          RowBox[{"strarr", ",", 
           RowBox[{"{", 
            RowBox[{
            "\"\<Excited\>\"", ",", "\"\<State\>\"", ",", "\"\<F\>\"", ",", 
             "\"\<=\>\""}], "}"}]}], "]"}], "[", 
         RowBox[{"[", "1", "]"}], "]"}], ",", 
        RowBox[{
         RowBox[{"mfe", "[", 
          RowBox[{"strarr", ",", 
           RowBox[{"{", 
            RowBox[{
            "\"\<Excited\>\"", ",", "\"\<State\>\"", ",", "\"\<mF\>\"", ",", 
             "\"\<=\>\""}], "}"}]}], "]"}], "[", 
         RowBox[{"[", "1", "]"}], "]"}]}], "}"}], "]"}]}], ";", 
    "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"stateass", "[", "\"\<exP\>\"", "]"}], "=", 
     RowBox[{"MakePJIKet", "[", 
      RowBox[{"{", 
       RowBox[{"1", ",", 
        RowBox[{"1", "/", "2"}], ",", 
        RowBox[{
         RowBox[{
          RowBox[{"mfe", "[", 
           RowBox[{"strarr", ",", 
            RowBox[{"{", 
             RowBox[{
             "\"\<Excited\>\"", ",", "\"\<State\>\"", ",", "\"\<2J\>\"", ",", 
              "\"\<=\>\""}], "}"}]}], "]"}], "[", 
          RowBox[{"[", "1", "]"}], "]"}], "/", "2"}], ",", 
        RowBox[{
         RowBox[{
          RowBox[{"mfe", "[", 
           RowBox[{"strarr", ",", 
            RowBox[{"{", 
             RowBox[{
             "\"\<Excited\>\"", ",", "\"\<State\>\"", ",", "\"\<2mJ\>\"", 
              ",", "\"\<=\>\""}], "}"}]}], "]"}], "[", 
          RowBox[{"[", "1", "]"}], "]"}], "/", "2"}], ",", 
        RowBox[{"1", "/", "2"}], ",", 
        RowBox[{
         RowBox[{
          RowBox[{"mfe", "[", 
           RowBox[{"strarr", ",", 
            RowBox[{"{", 
             RowBox[{
             "\"\<Excited\>\"", ",", "\"\<State\>\"", ",", "\"\<2mI\>\"", 
              ",", "\"\<=\>\""}], "}"}]}], "]"}], "[", 
          RowBox[{"[", "1", "]"}], "]"}], "/", "2"}]}], "}"}], "]"}]}], ";", 
    "\[IndentingNewLine]", 
    RowBox[{"laserass", "=", 
     RowBox[{"<|", "|>"}]}], ";", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"laserass", "[", "\"\<det\>\"", "]"}], "=", 
     RowBox[{
      RowBox[{"mfe", "[", 
       RowBox[{"strarr", ",", 
        RowBox[{"{", 
         RowBox[{"\"\<Laser\>\"", ",", "\"\<Detuning\>\"", ",", "\"\<=\>\""}],
          "}"}]}], "]"}], "[", 
      RowBox[{"[", "1", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"laserass", "[", "\"\<FWHM\>\"", "]"}], "=", 
     RowBox[{
      RowBox[{"mfe", "[", 
       RowBox[{"strarr", ",", 
        RowBox[{"{", 
         RowBox[{"\"\<Laser\>\"", ",", "\"\<FWHM\>\"", ",", "\"\<=\>\""}], 
         "}"}]}], "]"}], "[", 
      RowBox[{"[", "1", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"laserass", "[", "\"\<det_B0\>\"", "]"}], "=", 
     RowBox[{
      RowBox[{"mfe", "[", 
       RowBox[{"strarr", ",", 
        RowBox[{"{", 
         RowBox[{"\"\<Detuning\>\"", ",", "\"\<Field\>\"", ",", "\"\<=\>\""}],
          "}"}]}], "]"}], "[", 
      RowBox[{"[", "1", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
    RowBox[{"pathparams", "=", 
     RowBox[{"{", "}"}]}], ";", "\[IndentingNewLine]", 
    RowBox[{"Do", "[", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{
       RowBox[{"str", "=", 
        RowBox[{"OpenRead", "[", "pathfn", "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"strarr", "=", 
        RowBox[{"ReadList", "[", 
         RowBox[{"str", ",", "Word"}], "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"Close", "[", "str", "]"}], ";", "\[IndentingNewLine]", 
       RowBox[{"tmpass", "=", 
        RowBox[{"<|", "|>"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"tmpass", "[", "\"\<P\>\"", "]"}], "=", 
        RowBox[{
         RowBox[{"mfe", "[", 
          RowBox[{"strarr", ",", 
           RowBox[{"{", 
            RowBox[{"\"\<Power\>\"", ",", "\"\<=\>\""}], "}"}]}], "]"}], "[", 
         
         RowBox[{"[", "1", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"tmpass", "[", "\"\<khat\>\"", "]"}], "=", 
        RowBox[{"Table", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"mfe", "[", 
            RowBox[{"strarr", ",", 
             RowBox[{"{", 
              RowBox[{"\"\<Wave\>\"", ",", 
               RowBox[{"\"\<vector_\>\"", "<>", "tmpstr"}], ",", 
               "\"\<=\>\""}], "}"}]}], "]"}], "[", 
           RowBox[{"[", "1", "]"}], "]"}], ",", 
          RowBox[{"{", 
           RowBox[{"tmpstr", ",", 
            RowBox[{"{", 
             RowBox[{"\"\<x\>\"", ",", "\"\<y\>\"", ",", "\"\<z\>\""}], 
             "}"}]}], "}"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"tmpass", "[", "\"\<focus\>\"", "]"}], "=", 
        RowBox[{"Table", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"mfe", "[", 
            RowBox[{"strarr", ",", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"\"\<Focus_\>\"", "<>", "tmpstr"}], ",", "\"\<=\>\""}],
               "}"}]}], "]"}], "[", 
           RowBox[{"[", "1", "]"}], "]"}], ",", 
          RowBox[{"{", 
           RowBox[{"tmpstr", ",", 
            RowBox[{"{", 
             RowBox[{"\"\<x\>\"", ",", "\"\<y\>\"", ",", "\"\<z\>\""}], 
             "}"}]}], "}"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"tmpass", "[", "\"\<waist\>\"", "]"}], "=", 
        RowBox[{
         RowBox[{"mfe", "[", 
          RowBox[{"strarr", ",", 
           RowBox[{"{", 
            RowBox[{
            "\"\<Beam\>\"", ",", "\"\<waist\>\"", ",", "\"\<(radius)\>\"", 
             ",", "\"\<=\>\""}], "}"}]}], "]"}], "[", 
         RowBox[{"[", "1", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"tmpass", "[", "\"\<pol\>\"", "]"}], "=", 
        RowBox[{"Table", "[", 
         RowBox[{
          RowBox[{
           RowBox[{
            RowBox[{"mfe", "[", 
             RowBox[{"strarr", ",", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{"\"\<Polarization_\>\"", "<>", "tmpstr"}], ",", 
                "\"\<real\>\"", ",", "\"\<part\>\"", ",", "\"\<=\>\""}], 
               "}"}]}], "]"}], "[", 
            RowBox[{"[", "1", "]"}], "]"}], "+", 
           RowBox[{"I", "*", 
            RowBox[{
             RowBox[{"mfe", "[", 
              RowBox[{"strarr", ",", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"\"\<Polarization_\>\"", "<>", "tmpstr"}], ",", 
                 "\"\<imaginary\>\"", ",", "\"\<part\>\"", ",", "\"\<=\>\""}],
                 "}"}]}], "]"}], "[", 
             RowBox[{"[", "1", "]"}], "]"}]}]}], ",", 
          RowBox[{"{", 
           RowBox[{"tmpstr", ",", 
            RowBox[{"{", 
             RowBox[{"\"\<x\>\"", ",", "\"\<y\>\"", ",", "\"\<z\>\""}], 
             "}"}]}], "}"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"AppendTo", "[", 
        RowBox[{"pathparams", ",", "tmpass"}], "]"}], ";"}], 
      "\[IndentingNewLine]", ",", 
      RowBox[{"{", 
       RowBox[{"pathfn", ",", "pathoptsfiles"}], "}"}]}], "]"}], ";"}]}], 
  "\[IndentingNewLine]", "]"}]], "Input",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.},
 CellChangeTimes->{{3.748234705696362*^9, 3.748234729391322*^9}, {
   3.748234777326105*^9, 3.748234834034194*^9}, {3.748234879182106*^9, 
   3.748234930852702*^9}, {3.748234966435944*^9, 3.74823517857584*^9}, {
   3.7482354670805197`*^9, 3.748235549434263*^9}, {3.748235648252309*^9, 
   3.7482356591913958`*^9}, {3.748235752191743*^9, 3.748235784142418*^9}, {
   3.7482358242437677`*^9, 3.748235963783977*^9}, {3.748236029099347*^9, 
   3.748236333276716*^9}, {3.748236385416437*^9, 3.748236390057823*^9}, {
   3.748236449353662*^9, 3.748236519763977*^9}, {3.748236551174527*^9, 
   3.748236565402055*^9}, {3.74823659797292*^9, 3.74823664852421*^9}, {
   3.748236716847836*^9, 3.7482369331806593`*^9}, {3.748236991217244*^9, 
   3.748237192930522*^9}, {3.748237234015938*^9, 3.7482373443546352`*^9}, {
   3.748237375594304*^9, 3.748237388999208*^9}, {3.748237989942197*^9, 
   3.748238126496108*^9}, {3.748238200107272*^9, 3.748238226679482*^9}, {
   3.7482385585036507`*^9, 3.748238619062544*^9}, {3.7482386722802877`*^9, 
   3.7482387152192783`*^9}, {3.748238876502452*^9, 3.748238961920211*^9}, {
   3.7482434096489773`*^9, 3.748243410263681*^9}, {3.7482439537240458`*^9, 
   3.748244047332664*^9}, {3.748244084289246*^9, 3.748244103383079*^9}, 
   3.7482484797581177`*^9}],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"Intensity", "[", 
    RowBox[{"path_", ",", "pos_"}], "]"}], ":=", 
   RowBox[{
    FractionBox[
     RowBox[{"2", " ", 
      RowBox[{"path", "[", "\"\<P\>\"", "]"}]}], 
     RowBox[{"\[Pi]", " ", 
      SuperscriptBox[
       RowBox[{"path", "[", "\"\<waist\>\"", "]"}], "2"]}]], " ", 
    RowBox[{"Exp", "[", 
     RowBox[{
      RowBox[{"-", "2"}], " ", 
      RowBox[{
       SuperscriptBox[
        RowBox[{"Norm", "[", 
         RowBox[{"Cross", "[", 
          RowBox[{
           RowBox[{"pos", "-", 
            RowBox[{"path", "[", "\"\<focus\>\"", "]"}]}], ",", 
           RowBox[{"Normalize", "[", 
            RowBox[{"path", "[", "\"\<khat\>\"", "]"}], "]"}]}], "]"}], "]"}],
         "2"], "/", 
       SuperscriptBox[
        RowBox[{"path", "[", "\"\<waist\>\"", "]"}], "2"]}]}], "]"}]}]}], 
  ";"}]], "Input",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.},
 CellChangeTimes->{{3.7482375637588577`*^9, 3.7482376153405743`*^9}, 
   3.748248479758913*^9}],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"ElFld", "[", 
    RowBox[{"vel_", ",", "Bvec_"}], "]"}], ":=", 
   RowBox[{"Cross", "[", 
    RowBox[{"vel", ",", "Bvec"}], "]"}]}], ";"}]], "Input",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.},
 CellChangeTimes->{{3.748237830495303*^9, 3.748237876056776*^9}, {
   3.7482446983997583`*^9, 3.748244707559772*^9}, 3.748248479759321*^9}],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"detuning1S2S", "[", 
    RowBox[{"pos_", ",", "v_", ",", "BB_", ",", "Bvec_", ",", "path_"}], 
    "]"}], ":=", 
   RowBox[{
    RowBox[{"-", 
     RowBox[{"(", 
      RowBox[{
       RowBox[{"2", " ", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"(", 
           RowBox[{"1.39927", " ", 
            RowBox[{"10", "^", 
             RowBox[{"-", "4"}]}]}], ")"}], "-", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"\[Minus]", "2.67827"}], " ", 
            RowBox[{"10", "^", 
             RowBox[{"-", "5"}]}]}], ")"}]}], ")"}], "*", 
        RowBox[{"Sum", "[", 
         RowBox[{
          RowBox[{"Intensity", "[", 
           RowBox[{"pathloc", ",", "pos"}], "]"}], ",", 
          RowBox[{"{", 
           RowBox[{"pathloc", ",", "pathparams"}], "}"}]}], "]"}]}], "+", 
       RowBox[{
        SuperscriptBox[
         RowBox[{"Norm", "[", 
          RowBox[{"Cross", "[", 
           RowBox[{"v", ",", 
            RowBox[{"{", 
             RowBox[{"1", ",", "1", ",", "1"}], "}"}]}], "]"}], "]"}], "2"], 
        " ", 
        RowBox[{"DCStarkdivEsq", "[", 
         RowBox[{"stateass", "[", "\"\<exS\>\"", "]"}], "]"}]}], "-", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{
          RowBox[{"(", 
           RowBox[{
            FractionBox[
             RowBox[{
              RowBox[{
               RowBox[{"ass2S", "[", 
                RowBox[{"stateass", "[", "\"\<exS\>\"", "]"}], "]"}], "[", 
               RowBox[{"[", "1", "]"}], "]"}], "-", 
              RowBox[{
               RowBox[{"ass1S", "[", 
                RowBox[{"stateass", "[", "\"\<grS\>\"", "]"}], "]"}], "[", 
               RowBox[{"[", "1", "]"}], "]"}]}], "h"], "/.", 
            RowBox[{"B", "\[Rule]", 
             RowBox[{"laserass", "[", "\"\<det_B0\>\"", "]"}]}]}], ")"}], "+", 
          RowBox[{"2", "*", 
           RowBox[{"laserass", "[", "\"\<det\>\"", "]"}]}]}], ")"}], "*", 
        RowBox[{"(", 
         RowBox[{
          FractionBox["1", 
           RowBox[{"Sqrt", "[", 
            RowBox[{"1", "-", 
             SuperscriptBox[
              RowBox[{"Norm", "[", 
               RowBox[{"v", "/", "c"}], "]"}], "2"]}], "]"}]], "-", "1"}], 
         ")"}]}], "-", 
       RowBox[{"2", "*", 
        RowBox[{"laserass", "[", "\"\<det\>\"", "]"}]}], "+", 
       RowBox[{"(", 
        RowBox[{
         FractionBox[
          RowBox[{
           RowBox[{
            RowBox[{"ass2S", "[", 
             RowBox[{"stateass", "[", "\"\<exS\>\"", "]"}], "]"}], "[", 
            RowBox[{"[", "2", "]"}], "]"}], "-", 
           RowBox[{
            RowBox[{"ass1S", "[", 
             RowBox[{"stateass", "[", "\"\<grS\>\"", "]"}], "]"}], "[", 
            RowBox[{"[", "2", "]"}], "]"}]}], "h"], "-", 
         RowBox[{"(", 
          RowBox[{
           FractionBox[
            RowBox[{
             RowBox[{
              RowBox[{"ass2S", "[", 
               RowBox[{"stateass", "[", "\"\<exS\>\"", "]"}], "]"}], "[", 
              RowBox[{"[", "2", "]"}], "]"}], "-", 
             RowBox[{
              RowBox[{"ass1S", "[", 
               RowBox[{"stateass", "[", "\"\<grS\>\"", "]"}], "]"}], "[", 
              RowBox[{"[", "2", "]"}], "]"}]}], "h"], "/.", 
           RowBox[{"B", "\[Rule]", 
            RowBox[{"laserass", "[", "\"\<det_B0\>\"", "]"}]}]}], ")"}]}], 
        ")"}]}], ")"}]}], "/.", 
    RowBox[{"B", "\[Rule]", "BB"}]}]}], ";"}]], "Input",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.},
 CellChangeTimes->{{3.748148532909099*^9, 3.748148550316263*^9}, 
   3.7481486278487377`*^9, {3.748148778236102*^9, 3.748148871856001*^9}, {
   3.748148991018023*^9, 3.74814899238531*^9}, 3.7481496641019793`*^9, {
   3.748149695358132*^9, 3.748149760744444*^9}, {3.748150074962202*^9, 
   3.74815018077979*^9}, 3.748150254730275*^9, {3.7481502967171497`*^9, 
   3.748150312141715*^9}, {3.748150879195063*^9, 3.74815090197537*^9}, {
   3.748234372883603*^9, 3.748234396395596*^9}, {3.748234558421336*^9, 
   3.748234559139103*^9}, {3.748237929809494*^9, 3.748237957246372*^9}, {
   3.748238809047708*^9, 3.748238830640758*^9}, {3.748238968750997*^9, 
   3.748239082664806*^9}, 3.748242278485695*^9, {3.748242513521619*^9, 
   3.748242541957615*^9}, 3.74824847976005*^9}],

Cell[BoxData[
 RowBox[{
  RowBox[{"decayrate1S2S", "[", 
   RowBox[{"pos_", ",", "v_", ",", "BB_", ",", "Bvec_"}], "]"}], ":=", 
  RowBox[{
   RowBox[{"(", 
    RowBox[{
     RowBox[{"(", 
      RowBox[{"IonRatedivI", "*", 
       RowBox[{"Sum", "[", 
        RowBox[{
         RowBox[{"Intensity", "[", 
          RowBox[{"path", ",", "pos"}], "]"}], ",", 
         RowBox[{"{", 
          RowBox[{"path", ",", "pathparams"}], "}"}]}], "]"}]}], ")"}], "+", 
     "Sp2S", "+", 
     RowBox[{"(", 
      RowBox[{
       RowBox[{"Sp2SStarkdivEsqtot", "[", 
        RowBox[{"stateass", "[", "\"\<exS\>\"", "]"}], "]"}], "*", 
       SuperscriptBox[
        RowBox[{"Norm", "[", 
         RowBox[{"ElFld", "[", 
          RowBox[{"v", ",", "Bvec"}], "]"}], "]"}], "2"]}], ")"}]}], ")"}], "/.", 
   RowBox[{"B", "\[Rule]", "BB"}]}]}]], "Input",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.},
 CellChangeTimes->{{3.748234067804193*^9, 3.7482341232148867`*^9}, {
   3.748234228963262*^9, 3.748234267226796*^9}, {3.748234681375181*^9, 
   3.7482346836117077`*^9}, {3.748239178031727*^9, 3.748239203212784*^9}, {
   3.748239424451116*^9, 3.7482395003961077`*^9}, {3.7482396927878437`*^9, 
   3.748239697747868*^9}, 3.748248479760635*^9}],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"Rabifreq1S2S", "[", 
    RowBox[{"pos_", ",", "v_", ",", "BB_", ",", "Bvec_", ",", "path_"}], 
    "]"}], ":=", 
   RowBox[{
    RowBox[{
     RowBox[{"Intensity", "[", 
      RowBox[{"path", ",", "pos"}], "]"}], "*", 
     RowBox[{"Rabi1S2SdivI", "[", 
      RowBox[{
       RowBox[{"stateass", "[", "\"\<exS\>\"", "]"}], ",", 
       RowBox[{"stateass", "[", "\"\<grS\>\"", "]"}]}], "]"}]}], "/.", 
    RowBox[{"B", "\[Rule]", "BB"}]}]}], ";"}]], "Input",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.},
 CellChangeTimes->{{3.748242216209714*^9, 3.748242266419157*^9}, {
   3.748242456805956*^9, 3.7482424580074797`*^9}, 3.748248479761195*^9, {
   3.7482491718925056`*^9, 3.7482491722965717`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"detuningLyAlph", "[", 
    RowBox[{"pos_", ",", "v_", ",", "BB_", ",", "Bvec_", ",", "path_"}], 
    "]"}], ":=", 
   RowBox[{
    RowBox[{"-", 
     RowBox[{"(", 
      RowBox[{
       RowBox[{
        RowBox[{"-", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"(", 
            RowBox[{
             FractionBox[
              RowBox[{
               RowBox[{
                RowBox[{"ass2P", "[", 
                 RowBox[{"stateass", "[", "\"\<exP\>\"", "]"}], "]"}], "[", 
                RowBox[{"[", "1", "]"}], "]"}], "-", 
               RowBox[{
                RowBox[{"ass1S", "[", 
                 RowBox[{"stateass", "[", "\"\<grS\>\"", "]"}], "]"}], "[", 
                RowBox[{"[", "1", "]"}], "]"}]}], "h"], "/.", 
             RowBox[{"B", "\[Rule]", 
              RowBox[{"laserass", "[", "\"\<det_B0\>\"", "]"}]}]}], ")"}], 
           "+", 
           RowBox[{"laserass", "[", "\"\<det\>\"", "]"}]}], ")"}]}], " ", 
        RowBox[{"(", 
         RowBox[{
          FractionBox[
           RowBox[{"1", "-", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{
               RowBox[{"(", 
                RowBox[{"path", "[", "\"\<khat\>\"", "]"}], ")"}], ".", "v"}],
               "/", "c"}], ")"}]}], 
           RowBox[{"Sqrt", "[", 
            RowBox[{"1", "-", 
             SuperscriptBox[
              RowBox[{"Norm", "[", 
               RowBox[{"v", "/", "c"}], "]"}], "2"]}], "]"}]], "-", "1"}], 
         ")"}]}], "-", 
       RowBox[{"laserass", "[", "\"\<det\>\"", "]"}], "+", 
       RowBox[{"(", 
        RowBox[{
         FractionBox[
          RowBox[{
           RowBox[{
            RowBox[{"ass2P", "[", 
             RowBox[{"stateass", "[", "\"\<exP\>\"", "]"}], "]"}], "[", 
            RowBox[{"[", "2", "]"}], "]"}], "-", 
           RowBox[{
            RowBox[{"ass1S", "[", 
             RowBox[{"stateass", "[", "\"\<grS\>\"", "]"}], "]"}], "[", 
            RowBox[{"[", "2", "]"}], "]"}]}], "h"], "-", 
         RowBox[{"(", 
          RowBox[{
           FractionBox[
            RowBox[{
             RowBox[{
              RowBox[{"ass2P", "[", 
               RowBox[{"stateass", "[", "\"\<exP\>\"", "]"}], "]"}], "[", 
              RowBox[{"[", "2", "]"}], "]"}], "-", 
             RowBox[{
              RowBox[{"ass1S", "[", 
               RowBox[{"stateass", "[", "\"\<grS\>\"", "]"}], "]"}], "[", 
              RowBox[{"[", "2", "]"}], "]"}]}], "h"], "/.", 
           RowBox[{"B", "\[Rule]", 
            RowBox[{"laserass", "[", "\"\<det_B0\>\"", "]"}]}]}], ")"}]}], 
        ")"}]}], ")"}]}], "/.", 
    RowBox[{"B", "\[Rule]", "BB"}]}]}], ";"}]], "Input",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.},
 CellChangeTimes->{{3.7481487152705517`*^9, 3.748148777155916*^9}, {
   3.748150231518939*^9, 3.748150282874515*^9}, {3.748150322248104*^9, 
   3.748150325758143*^9}, {3.748150366820801*^9, 3.748150427570187*^9}, {
   3.748150679832659*^9, 3.748150711427788*^9}, {3.748150768644401*^9, 
   3.748150796945759*^9}, {3.748150827980501*^9, 3.748150860933338*^9}, {
   3.748242354723469*^9, 3.748242438940978*^9}, {3.748242502233555*^9, 
   3.748242504046167*^9}, {3.748242555511772*^9, 3.7482425701210623`*^9}, 
   3.748248479762083*^9}],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"decayrateLyAlph", "[", 
    RowBox[{"pos_", ",", "v_", ",", "BB_", ",", "Bvec_"}], "]"}], ":=", 
   RowBox[{"N", "[", 
    RowBox[{
     RowBox[{"Sp2Ptot", "[", 
      RowBox[{"stateass", "[", "\"\<exP\>\"", "]"}], "]"}], "/.", 
     RowBox[{"B", "\[Rule]", "BB"}]}], "]"}]}], ";"}]], "Input",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.},
 CellChangeTimes->{{3.748234597769294*^9, 3.748234628347629*^9}, {
   3.7482424423410892`*^9, 3.748242473498954*^9}, 3.748248479762836*^9}],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"RabifreqLyAlph", "[", 
    RowBox[{"pos_", ",", "v_", ",", "BB_", ",", "Bvec_", ",", "path_"}], 
    "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"xhat", ",", "yhat", ",", "zhat", ",", "tmpRabivec"}], "}"}], 
     ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"zhat", "=", 
       RowBox[{"Normalize", "[", "Bvec", "]"}]}], ";", "\[IndentingNewLine]", 
      
      RowBox[{"yhat", "=", 
       RowBox[{"Normalize", "[", 
        RowBox[{"Cross", "[", 
         RowBox[{"zhat", ",", 
          RowBox[{"{", 
           RowBox[{"1", ",", "0", ",", "0"}], "}"}]}], "]"}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"xhat", "=", 
       RowBox[{"Normalize", "[", 
        RowBox[{"Cross", "[", 
         RowBox[{"yhat", ",", "zhat"}], "]"}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"tmpRabivec", "=", 
       RowBox[{
        RowBox[{"RabiLyAlphdivsqrtI", "[", 
         RowBox[{
          RowBox[{"stateass", "[", "\"\<exP\>\"", "]"}], ",", 
          RowBox[{"stateass", "[", "\"\<grS\>\"", "]"}]}], "]"}], "/.", 
        RowBox[{"B", "\[Rule]", "BB"}]}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"Return", "[", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{
             RowBox[{"Normalize", "[", 
              RowBox[{"path", "[", "\"\<pol\>\"", "]"}], "]"}], ".", "xhat"}],
             ",", 
            RowBox[{
             RowBox[{"Normalize", "[", 
              RowBox[{"path", "[", "\"\<pol\>\"", "]"}], "]"}], ".", "yhat"}],
             ",", 
            RowBox[{
             RowBox[{"Normalize", "[", 
              RowBox[{"path", "[", "\"\<pol\>\"", "]"}], "]"}], ".", 
             "zhat"}]}], "}"}], ".", "tmpRabivec"}], ")"}], " ", 
        RowBox[{"Sqrt", "[", 
         RowBox[{"Intensity", "[", 
          RowBox[{"path", ",", "pos"}], "]"}], "]"}]}], "]"}], ";"}]}], 
    "\[IndentingNewLine]", "]"}]}], ";"}]], "Input",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.},
 CellChangeTimes->{{3.74823951508816*^9, 3.748239533624112*^9}, {
   3.7482395832700577`*^9, 3.7482398818500977`*^9}, {3.748243099879156*^9, 
   3.748243120402994*^9}, {3.748243152267151*^9, 3.748243164933378*^9}, 
   3.74824320593362*^9, {3.7482432397604523`*^9, 3.7482432644360867`*^9}, {
   3.7482433834167213`*^9, 3.748243392174515*^9}, {3.748244817820545*^9, 
   3.74824486401096*^9}, {3.748244905486575*^9, 3.74824491968163*^9}, {
   3.7482449515678997`*^9, 3.7482449549027348`*^9}, {3.748245115762238*^9, 
   3.748245116439329*^9}, {3.74824679717152*^9, 3.748246835121846*^9}, {
   3.748247757026936*^9, 3.7482477752137957`*^9}, {3.748248059745265*^9, 
   3.748248073155442*^9}, {3.748248125187726*^9, 3.748248135600054*^9}, 
   3.748248479763364*^9}],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"paramsLyAlph", "[", 
    RowBox[{"pos_", ",", "v_", ",", "BB_", ",", "Bvec_"}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"rettbl", ",", "tmpRabi"}], "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"rettbl", "=", 
       RowBox[{"{", "}"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"Do", "[", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{"tmpRabi", "=", 
          RowBox[{"RabifreqLyAlph", "[", 
           RowBox[{"pos", ",", "v", ",", "BB", ",", "Bvec", ",", "path"}], 
           "]"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"AppendTo", "[", 
          RowBox[{"rettbl", ",", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"Re", "[", "tmpRabi", "]"}], ",", 
             RowBox[{"Im", "[", "tmpRabi", "]"}], ",", 
             RowBox[{"detuningLyAlph", "[", 
              RowBox[{"pos", ",", "v", ",", "BB", ",", "Bvec", ",", "path"}], 
              "]"}], ",", 
             RowBox[{"laserass", "[", "\"\<FWHM\>\"", "]"}], ",", 
             RowBox[{"decayrateLyAlph", "[", 
              RowBox[{"pos", ",", "v", ",", "BB", ",", "Bvec"}], "]"}]}], 
            "}"}]}], "]"}], ";"}], "\[IndentingNewLine]", ",", 
        RowBox[{"{", 
         RowBox[{"path", ",", "pathparams"}], "}"}]}], "]"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"Return", "[", 
       RowBox[{"N", "[", "rettbl", "]"}], "]"}], ";"}]}], 
    "\[IndentingNewLine]", "]"}]}], ";"}]], "Input",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.},
 CellChangeTimes->{{3.748242600832656*^9, 3.748242681999633*^9}, {
   3.7482427266684933`*^9, 3.748242876086404*^9}, {3.7482429519258833`*^9, 
   3.748242953966036*^9}, 3.7482484797640963`*^9}],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"params1S2S", "[", 
    RowBox[{"pos_", ",", "v_", ",", "BB_", ",", "Bvec_"}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"rettbl", ",", "tmpRabi"}], "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"rettbl", "=", 
       RowBox[{"{", "}"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"Do", "[", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{"tmpRabi", "=", 
          RowBox[{"Rabifreq1S2S", "[", 
           RowBox[{"pos", ",", "v", ",", "BB", ",", "Bvec", ",", "path"}], 
           "]"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"AppendTo", "[", 
          RowBox[{"rettbl", ",", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"Re", "[", "tmpRabi", "]"}], ",", 
             RowBox[{"Im", "[", "tmpRabi", "]"}], ",", 
             RowBox[{"detuning1S2S", "[", 
              RowBox[{"pos", ",", "v", ",", "BB", ",", "Bvec", ",", "path"}], 
              "]"}], ",", 
             RowBox[{"2", "*", 
              RowBox[{"laserass", "[", "\"\<FWHM\>\"", "]"}]}], ",", 
             RowBox[{"decayrate1S2S", "[", 
              RowBox[{"pos", ",", "v", ",", "BB", ",", "Bvec"}], "]"}]}], 
            "}"}]}], "]"}], ";"}], "\[IndentingNewLine]", ",", 
        RowBox[{"{", 
         RowBox[{"path", ",", "pathparams"}], "}"}]}], "]"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"Return", "[", 
       RowBox[{"N", "[", "rettbl", "]"}], "]"}], ";"}]}], 
    "\[IndentingNewLine]", "]"}]}], ";"}]], "Input",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.},
 CellChangeTimes->{{3.74824286695837*^9, 3.74824289041055*^9}, {
   3.748242947729209*^9, 3.748242949635147*^9}, 3.748248479764842*^9}]
}, Open  ]],

Cell[BoxData[
 RowBox[{"Max", "[", 
  RowBox[{"Abs", "[", 
   FractionBox[
    RowBox[{"params", "-", 
     RowBox[{"params1S2S", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"0", ",", "0", ",", "0"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"30", ",", 
         RowBox[{"-", "20"}], ",", "10"}], "}"}], ",", "1", ",", 
       RowBox[{"{", 
        RowBox[{"1", ",", "1", ",", "1"}], "}"}]}], "]"}]}], 
    RowBox[{"params", "+", 
     SuperscriptBox["10", 
      RowBox[{"-", "100"}]]}]], "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.7482429226592417`*^9, 3.748242923600913*^9}, {
   3.748248556425168*^9, 3.748248589542444*^9}, {3.748248888385827*^9, 
   3.748248898770831*^9}, {3.7482489966102123`*^9, 3.748249001391433*^9}, {
   3.748249537299005*^9, 3.7482495375947313`*^9}, 3.748318656507918*^9}],

Cell[BoxData[
 RowBox[{"Max", "[", 
  RowBox[{"Abs", "[", 
   FractionBox[
    RowBox[{"params", "-", 
     RowBox[{"paramsLyAlph", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"0", ",", "0", ",", "0"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"30", ",", 
         RowBox[{"-", "20"}], ",", "10"}], "}"}], ",", "1", ",", 
       RowBox[{"{", 
        RowBox[{"1", ",", "1", ",", "1"}], "}"}]}], "]"}]}], 
    RowBox[{"params", "+", 
     SuperscriptBox["10", 
      RowBox[{"-", "100"}]]}]], "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.748249671958951*^9, 3.748249672697179*^9}, {
  3.748318497429948*^9, 3.748318497911457*^9}}]
},
WindowSize->{808, 766},
WindowMargins->{{Automatic, 166}, {Automatic, 0}},
FrontEndVersion->"11.0 for Mac OS X x86 (32-bit, 64-bit Kernel) (September \
21, 2016)",
StyleDefinitions->"Default.nb"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[558, 20, 484, 11, 96, "Input"],
Cell[CellGroupData[{
Cell[1067, 35, 6923, 184, 508, "Input",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.}],
Cell[7993, 221, 51191, 852, 242, 40555, 679, "CachedBoxData", "BoxData", \
"Output",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.}],
Cell[59187, 1075, 14428, 355, 1209, "Input",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.}],
Cell[73618, 1432, 1027, 30, 102, "Input",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.}],
Cell[74648, 1464, 391, 9, 32, "Input",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.}],
Cell[75042, 1475, 4300, 107, 357, "Input",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.}],
Cell[79345, 1584, 1236, 30, 79, "Input",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.}],
Cell[80584, 1616, 753, 18, 54, "Input",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.}],
Cell[81340, 1636, 3303, 83, 276, "Input",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.}],
Cell[84646, 1721, 535, 12, 32, "Input",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.}],
Cell[85184, 1735, 2871, 67, 201, "Input",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.}],
Cell[88058, 1804, 1803, 41, 201, "Input",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.}],
Cell[89864, 1847, 1772, 41, 201, "Input",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.}]
}, Open  ]],
Cell[91651, 1891, 826, 20, 53, "Input"],
Cell[92480, 1913, 653, 18, 54, "Input"]
}
]
*)

